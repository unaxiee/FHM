{"arch": "metapc", "ghash_internal": {"111968": {"disasm": ["push    ebp", "call    __x86_get_pc_thunk_ax", "add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)", "push    edi", "push    esi", "push    ebx", "sub     esp, 5Ch", "mov     edi, [esp+6Ch+buf]", "mov     edx, [esp+6Ch+c]", "mov     [esp+6Ch+buf_0], edi", "mov     ebp, [esp+6Ch+result]", "mov     edi, large gs:14h", "mov     [esp+6Ch+var_20], edi", "xor     edi, edi", "mov     ecx, dword ptr (gcm_table.counter_head - 0F5E70h)[eax]", "inc     ecx", "mov     dword ptr (gcm_table.counter_head - 0F5E70h)[eax], ecx", "mov     ecx, (gcm_table.counter_tail - 0F5E70h)[eax]", "inc     ecx", "mov     (gcm_table.counter_tail - 0F5E70h)[eax], ecx", "mov     cl, [edx+100h]", "mov     cl, [edx+120h]", "mov     cl, [edx+140h]", "mov     cl, [edx+160h]", "mov     cl, [edx+180h]", "mov     cl, [edx+1A0h]", "mov     cl, [edx+1C0h]", "mov     cl, [edx+1E0h]", "mov     cl, [edx+200h]", "mov     cl, [edx+220h]", "mov     cl, [edx+240h]", "mov     cl, [edx+260h]", "mov     cl, [edx+280h]", "mov     cl, [edx+2A0h]", "mov     cl, [edx+2C0h]", "mov     cl, [edx+2E0h]", "mov     cl, [edx+2FFh]", "mov     cl, byte ptr (gcm_table.counter_head - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.cacheline_align+1Ch - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+20h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+40h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+60h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+80h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+0A0h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+0C0h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+0E0h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+100h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+120h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+140h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+160h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+180h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+1A0h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+1C0h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.R+1E0h - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.counter_tail - 0F5E70h)[eax]", "mov     cl, byte ptr (gcm_table.counter_tail+3 - 0F5E70h)[eax]", "mov     ecx, [esp+6Ch+nblocks]", "test    ecx, ecx", "jz      loc_1B835"], "preds": [], "succs": [112274, 112693]}, "112274": {"disasm": ["lea     edi, [edx+100h]", "lea     eax, (gcm_table.counter_head - 0F5E70h)[eax]", "mov     [esp+6Ch+var_60], edi", "lea     edi, [esp+6Ch+var_23]", "mov     [esp+6Ch+var_40], edi", "lea     edi, [esp+6Ch+var_31]", "mov     [esp+6Ch+var_48], edi", "mov     [esp+6Ch+var_44], eax", "xchg    ax, ax"], "preds": [111968], "succs": [112312]}, "112312": {"disasm": ["mov     esi, [esp+6Ch+buf_0]", "mov     eax, [ebp+0]", "mov     [esp+6Ch+var_4C], ebp", "mov     edi, [esi]", "mov     edx, [esi+8]", "xor     eax, edi", "mov     ebx, [esi+4]", "mov     ecx, [esi+0Ch]", "mov     esi, [ebp+0Ch]", "xor     ecx, esi", "mov     [esp+6Ch+var_30], eax", "mov     eax, [ebp+4]", "mov     [esp+48h], ecx", "xor     eax, ebx", "mov     ebx, ecx", "shr     ebx, 18h", "mov     [esp+6Ch+var_2C], eax", "shr     ecx, 10h", "mov     eax, [ebp+8]", "xor     eax, edx", "mov     edx, ebx", "and     edx, 0Fh", "mov     [esp+6Ch+var_28], eax", "add     edx, 10h", "mov     eax, [esp+6Ch+var_60]", "shl     edx, 4", "and     ebx, 0F0h", "add     edx, eax", "add     ebx, eax", "and     ecx, 0FFh", "mov     eax, [edx]", "mov     edi, [ebx]", "xor     eax, edi", "mov     esi, [ebx+4]", "mov     [esp+6Ch+var_5C], eax", "mov     eax, [edx+4]", "mov     edi, [edx+8]", "xor     eax, esi", "mov     esi, [ebx+8]", "xor     edi, esi", "mov     esi, [edx+0Ch]", "mov     edx, [ebx+0Ch]", "xor     esi, edx", "mov     edx, [esp+6Ch+var_40]", "mov     [esp+6Ch+var_58], edx", "jmp     short loc_1B752"], "preds": [112274, 112636], "succs": [112466]}, "112456": {"disasm": ["xor     ecx, ecx", "dec     ebx", "mov     cl, [ebx+1]", "mov     [esp+6Ch+var_58], ebx"], "preds": [112466], "succs": [112466]}, "112466": {"disasm": ["mov     edx, ecx", "mov     ebx, [esp+6Ch+var_60]", "and     edx, 0Fh", "mov     ebp, eax", "add     edx, 10h", "and     ecx, 0F0h", "shl     edx, 4", "shr     ebp, 8", "add     edx, ebx", "shl     eax, 18h", "mov     ebx, [esp+6Ch+var_5C]", "shl     ebx, 18h", "xor     ebx, ebp", "mov     ebp, [esp+6Ch+var_60]", "xor     ebx, [ebp+ecx+4]", "mov     ebp, edi", "shr     ebp, 8", "mov     [esp+6Ch+var_54], ebx", "mov     ebx, [esp+6Ch+var_60]", "xor     eax, ebp", "shl     edi, 18h", "mov     ebp, [ebx+ecx+8]", "xor     ebp, eax", "mov     eax, esi", "shr     eax, 8", "and     esi, 0FFh", "xor     edi, eax", "mov     eax, [esp+6Ch+var_60]", "mov     ebx, [eax+ecx+0Ch]", "xor     eax, eax", "xor     edi, ebx", "mov     ebx, edi", "mov     edi, [esp+6Ch+var_44]", "mov     ax, [edi+esi*2+40h]", "mov     esi, [esp+6Ch+var_60]", "shl     eax, 10h", "mov     edi, [esi+ecx]", "mov     ecx, [esp+6Ch+var_5C]", "xor     eax, edi", "mov     esi, [edx+4]", "shr     ecx, 8", "mov     edi, [edx+8]", "xor     eax, ecx", "mov     ecx, [edx]", "xor     eax, ecx", "xor     edi, ebp", "mov     [esp+6Ch+var_5C], eax", "mov     eax, [esp+6Ch+var_54]", "xor     eax, esi", "mov     esi, [edx+0Ch]", "xor     esi, ebx", "mov     ebx, [esp+6Ch+var_58]", "cmp     [esp+6Ch+var_48], ebx", "jnz     loc_1B748"], "preds": [112312, 112456], "succs": [112456, 112636]}, "112636": {"disasm": ["mov     ebp, [esp+6Ch+var_4C]", "mov     ecx, [esp+6Ch+var_5C]", "bswap   eax", "mov     [ebp+4], eax", "mov     eax, [esp+6Ch+buf_0]", "add     eax, 10h", "dec     [esp+6Ch+nblocks]", "bswap   ecx", "bswap   edi", "bswap   esi", "mov     [ebp+0], ecx", "mov     [ebp+8], edi", "mov     [ebp+0Ch], esi", "mov     [esp+6Ch+buf_0], eax", "jnz     loc_1B6B8"], "preds": [112466], "succs": [112312, 112685]}, "112685": {"disasm": ["mov     [esp+6Ch+nblocks], 60h ; '`'"], "preds": [112636], "succs": [112693]}, "112693": {"disasm": ["mov     eax, [esp+6Ch+var_20]", "xor     eax, large gs:14h", "jnz     short loc_1B84E"], "preds": [111968, 112685], "succs": [112706, 112718]}, "112706": {"disasm": ["mov     eax, [esp+6Ch+nblocks]", "add     esp, 5Ch", "pop     ebx", "pop     esi", "pop     edi", "pop     ebp", "retn"], "preds": [112693], "succs": []}, "112718": {"disasm": ["call    __stack_chk_fail_local"], "preds": [112693], "succs": []}}, "do_encrypt": {"192960": {"disasm": ["push    ebp", "push    edi", "mov     edi, [ret_xr]", "push    esi", "mov     esi, ret_xl", "push    ebx", "mov     ebx, [bc+1000h]", "mov     ret_xl, [ret_xl]", "xor     xl, ebx", "mov     ebx, [s0+1004h]", "xor     ebx, edi", "mov     ebp, xl", "shr     ebp, 10h", "mov     edi, ebx", "mov     ebx, xl", "and     ebp, 0FFh", "shr     ebx, 18h", "mov     ebx, [s0+ebx*4]", "add     ebx, [s0+ebp*4+400h]", "movzx   ebp, dh", "xor     ebx, [s0+ebp*4+800h]", "mov     ebp, xl", "and     ebp, 0FFh", "add     ebx, [s0+ebp*4+0C00h]", "xor     ebx, edi", "mov     edi, [s0+1008h]", "xor     edx, edi", "mov     ebp, xr", "shr     ebp, 10h", "mov     edi, edx", "mov     edx, xr", "and     ebp, 0FFh", "shr     edx, 18h", "mov     edx, [s0+edx*4]", "add     edx, [s0+ebp*4+400h]", "movzx   ebp, bh", "xor     edx, [s0+ebp*4+800h]", "mov     ebp, xr", "and     ebp, 0FFh", "add     edx, [s0+ebp*4+0C00h]", "xor     edx, edi", "mov     edi, [s0+100Ch]", "xor     ebx, edi", "mov     ebp, xl", "shr     ebp, 10h", "mov     edi, xl", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, dh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xl", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     ebx, edi", "mov     edi, [s0+1010h]", "xor     edx, edi", "mov     ebp, xr", "shr     ebp, 10h", "mov     edi, xr", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, bh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xr", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     edx, edi", "mov     edi, [s0+1014h]", "xor     ebx, edi", "mov     ebp, xl", "shr     ebp, 10h", "mov     edi, xl", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, dh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xl", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     ebx, edi", "mov     edi, [s0+1018h]", "xor     edx, edi", "mov     ebp, xr", "shr     ebp, 10h", "mov     edi, xr", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, bh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xr", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     edx, edi", "mov     edi, [s0+101Ch]", "xor     ebx, edi", "mov     ebp, xl", "shr     ebp, 10h", "mov     edi, xl", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, dh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xl", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     ebx, edi", "mov     edi, [s0+1020h]", "xor     edx, edi", "mov     ebp, xr", "shr     ebp, 10h", "mov     edi, xr", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, bh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xr", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     edx, edi", "mov     edi, [s0+1024h]", "xor     ebx, edi", "mov     ebp, xl", "shr     ebp, 10h", "mov     edi, xl", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, dh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xl", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     ebx, edi", "mov     edi, [s0+1028h]", "xor     edx, edi", "mov     ebp, xr", "shr     ebp, 10h", "mov     edi, xr", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, bh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xr", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     edx, edi", "mov     edi, [s0+102Ch]", "xor     ebx, edi", "mov     ebp, xl", "shr     ebp, 10h", "mov     edi, xl", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, dh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xl", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     ebx, edi", "mov     edi, [s0+1030h]", "xor     edx, edi", "mov     ebp, xr", "shr     ebp, 10h", "mov     edi, xr", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, bh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xr", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     edx, edi", "mov     edi, [s0+1034h]", "xor     ebx, edi", "mov     ebp, xl", "shr     ebp, 10h", "mov     edi, xl", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, dh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xl", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     ebx, edi", "mov     edi, [s0+1038h]", "xor     edx, edi", "mov     ebp, xr", "shr     ebp, 10h", "mov     edi, xr", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, bh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xr", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     edx, edi", "mov     edi, [s0+103Ch]", "xor     ebx, edi", "mov     ebp, xl", "shr     ebp, 10h", "mov     edi, xl", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, dh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xl", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     ebx, edi", "mov     edi, [s0+1040h]", "xor     edx, edi", "mov     ebp, xr", "shr     ebp, 10h", "mov     edi, xr", "shr     edi, 18h", "and     ebp, 0FFh", "mov     edi, [s0+edi*4]", "add     edi, [s0+ebp*4+400h]", "movzx   ebp, bh", "xor     edi, [s0+ebp*4+800h]", "mov     ebp, xr", "and     ebp, 0FFh", "add     edi, [s0+ebp*4+0C00h]", "xor     edx, edi", "mov     edi, [s0+1044h]", "xor     ebx, edi", "mov     [ret_xl], xr", "pop     xr", "pop     ret_xl", "mov     [ret_xr], xl", "pop     edi", "pop     ebp", "retn"], "preds": [], "succs": []}}, "prefetch_dec": {"234800": {"disasm": ["call    __x86_get_pc_thunk_ax", "add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)", "mov     edx, dword ptr (dec_tables.counter_head - 0F5E70h)[eax]", "inc     edx", "mov     dword ptr (dec_tables.counter_head - 0F5E70h)[eax], edx", "mov     edx, (dec_tables.counter_tail - 0F5E70h)[eax]", "inc     edx", "mov     (dec_tables.counter_tail - 0F5E70h)[eax], edx", "mov     dl, byte ptr (dec_tables.counter_head - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.cacheline_align+1Ch - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+20h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+40h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+60h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+80h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+0A0h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+0C0h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+0E0h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+100h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+120h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+140h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+160h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+180h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+1A0h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+1C0h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+1E0h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+200h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+220h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+240h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+260h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+280h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+2A0h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+2C0h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+2E0h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+300h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+320h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+340h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+360h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+380h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+3A0h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+3C0h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.T+3E0h - 0F5E70h)[eax]", "mov     dl, (dec_tables.inv_sbox - 0F5E70h)[eax]", "mov     dl, (dec_tables.inv_sbox+20h - 0F5E70h)[eax]", "mov     dl, (dec_tables.inv_sbox+40h - 0F5E70h)[eax]", "mov     dl, (dec_tables.inv_sbox+60h - 0F5E70h)[eax]", "mov     dl, (dec_tables.inv_sbox+80h - 0F5E70h)[eax]", "mov     dl, (dec_tables.inv_sbox+0A0h - 0F5E70h)[eax]", "mov     dl, (dec_tables.inv_sbox+0C0h - 0F5E70h)[eax]", "mov     dl, (dec_tables.inv_sbox+0E0h - 0F5E70h)[eax]", "mov     dl, byte ptr (dec_tables.counter_tail - 0F5E70h)[eax]", "mov     al, byte ptr (dec_tables.counter_tail+3 - 0F5E70h)[eax]", "retn"], "preds": [], "succs": []}}, "prefetch_enc": {"242432": {"disasm": ["call    __x86_get_pc_thunk_ax", "add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)", "mov     edx, dword ptr (enc_tables.counter_head - 0F5E70h)[eax]", "inc     edx", "mov     dword ptr (enc_tables.counter_head - 0F5E70h)[eax], edx", "mov     edx, (enc_tables.counter_tail - 0F5E70h)[eax]", "inc     edx", "mov     (enc_tables.counter_tail - 0F5E70h)[eax], edx", "mov     dl, byte ptr (enc_tables.counter_head - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.cacheline_align+1Ch - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+20h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+40h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+60h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+80h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+0A0h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+0C0h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+0E0h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+100h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+120h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+140h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+160h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+180h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+1A0h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+1C0h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+1E0h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+200h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+220h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+240h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+260h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+280h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+2A0h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+2C0h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+2E0h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+300h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+320h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+340h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+360h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+380h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+3A0h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+3C0h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.T+3E0h - 0F5E70h)[eax]", "mov     dl, byte ptr (enc_tables.counter_tail - 0F5E70h)[eax]", "mov     al, byte ptr (enc_tables.counter_tail+3 - 0F5E70h)[eax]", "retn"], "preds": [], "succs": []}}, "sign": {"332512": {"disasm": ["push    ebp", "mov     ebp, input_0", "push    edi", "mov     edi, r", "push    esi", "push    ebx", "call    __x86_get_pc_thunk_bx", "add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)", "sub     esp, 58h", "mov     esi, [esp+68h+skey]", "mov     [esp+68h+s], s_0", "mov     [esp+68h+input], input_0", "mov     input_0, [esi+4]", "mov     r, large gs:14h", "mov     [esp+68h+var_20], r", "xor     r, r", "push    ecx; a", "call    _gcry_mpi_get_nbits", "mov     [esp+6Ch+qbits], eax", "add     esp, 0Ch", "push    qbits_0; qbits", "lea     qbits_0, [esp+64h+hash]", "push    eax; out", "push    input_0; input", "call    _gcry_dsa_normalize_hash", "mov     [esp+6Ch+rc], eax", "add     esp, 10h", "test    rc_0, rc_0", "jnz     loc_514DF"], "preds": [], "succs": [332601, 333023]}, "332601": {"disasm": ["mov     edx, [esp+5Ch+hashalgo]", "mov     rc_0, [esp+5Ch+flags]", "shr     eax, 1", "test    edx, edx", "setnz   dl", "and     edx, eax", "lea     eax, [esp+5Ch+abits]", "mov     [esp+5Ch+nbits], eax", "lea     eax, [esp+5Ch+k]", "mov     [esp+5Ch+var_3D], dl", "mov     [esp+5Ch+extraloops], 0", "mov     [esp+5Ch+r_k], eax", "jmp     again"], "preds": [332512], "succs": [332890]}, "332656": {"disasm": ["push    eax", "push    eax", "push    1; security_level", "mov     eax, [esi+4]", "push    eax; q", "call    _gcry_dsa_gen_k", "mov     [esp+6Ch+k], eax", "add     esp, 10h"], "preds": [332890], "succs": [332676]}, "332676": {"disasm": ["sub     esp, 0Ch", "mov     edx, [eax+4]", "push    edx; nlimbs", "call    _gcry_mpi_alloc", "add     esp, 0Ch", "mov     ecx, [esi+4]", "push    ecx; n", "mov     ebp, [esp+64h+k]", "push    ebp; a", "push    kinv_0; x", "mov     [esp+6Ch+kinv], kinv_0", "call    _gcry_mpi_invm", "add     esp, 0Ch", "mov     eax, [esp+60h+qbits]", "push    eax; qbits", "mov     eax, [esi+4]", "push    eax; q", "mov     eax, [esp+68h+k]", "push    eax; k", "call    _gcry_dsa_modify_k", "mov     eax, [esi]", "push    eax; mod", "mov     eax, [esp+70h+k]", "push    eax; expo", "mov     edx, [esi+8]", "push    edx; base", "push    r; res", "call    _gcry_mpi_powm", "add     esp, 1Ch", "mov     ecx, [esi+4]", "push    ecx; divisor", "push    r; dividend", "push    r; rem", "call    _gcry_mpi_fdiv_r", "mov     eax, [esi]", "pop     ebp", "mov     eax, [eax+4]", "push    eax; nlimbs", "call    _gcry_mpi_alloc", "add     esp, 0Ch", "mov     ebp, eax", "push    r; v", "mov     tmp, [esi+10h]", "push    eax; u", "push    tmp; w", "call    _gcry_mpi_mul", "add     esp, 0Ch", "mov     eax, [esp+60h+hash]", "push    eax; v", "push    tmp; u", "push    tmp; w", "call    _gcry_mpi_add", "mov     eax, [esi+4]", "push    eax; m", "push    tmp; v", "mov     edx, [esp+74h+kinv]", "push    edx; u", "mov     eax, [esp+78h+s]", "mov     [esp+78h+kinv], edx", "push    eax; w", "call    _gcry_mpi_mulm", "add     esp, 14h", "mov     edx, [esp+68h+k]", "push    edx; a", "call    _gcry_mpi_free", "mov     edx, [esp+6Ch+kinv]", "mov     [esp+6Ch+a], edx; a", "call    _gcry_mpi_free", "mov     [esp+6Ch+a], tmp; a", "call    _gcry_mpi_free", "pop     ecx", "pop     tmp", "push    0; v", "push    r; u", "call    _gcry_mpi_cmp_ui", "add     esp, 10h", "test    eax, eax", "jnz     short leave"], "preds": [332656, 332988], "succs": [332881, 333001]}, "332881": {"disasm": ["mov     eax, [esp+5Ch+extraloops]", "inc     eax", "mov     [esp+5Ch+extraloops], eax"], "preds": [332676], "succs": [332890]}, "332890": {"disasm": ["cmp     [esp+5Ch+var_3D], 0", "jz      loc_51370"], "preds": [332601, 332881], "succs": [332656, 332901]}, "332901": {"disasm": ["mov     eax, [esp+5Ch+input]", "test    eax, eax", "jz      loc_514F8"], "preds": [332890], "succs": [332913, 333048]}, "332913": {"disasm": ["test    byte ptr [eax+0Ch], 4", "jz      loc_514F8"], "preds": [332901], "succs": [332923, 333048]}, "332923": {"disasm": ["push    edx", "push    edx", "mov     ecx, [esp+64h+nbits]", "push    ecx; nbits", "push    eax; a", "call    _gcry_mpi_get_opaque", "add     esp, 0Ch", "mov     ebp, [esp+60h+extraloops]", "mov     edx, eax", "push    ebp; extraloops", "mov     abuf, [esp+64h+hashalgo]", "push    eax; halgo", "mov     eax, [esp+68h+abits]", "add     eax, 7", "shr     eax, 3", "push    eax; hlen", "push    abuf; h1", "mov     eax, [esi+10h]", "push    eax; dsa_x", "mov     eax, [esi+4]", "push    eax; dsa_q", "mov     eax, [esp+78h+r_k]", "push    eax; r_k", "call    _gcry_dsa_gen_rfc6979_k", "add     esp, 20h", "test    rc_0, rc_0", "jnz     short loc_514C5"], "preds": [332913], "succs": [332988, 332997]}, "332988": {"disasm": ["mov     rc_0, [esp+5Ch+k]", "jmp     loc_51384"], "preds": [332923], "succs": [332676]}, "332997": {"disasm": ["mov     [esp+5Ch+rc], rc_0"], "preds": [332923], "succs": [333001]}, "333001": {"disasm": ["mov     eax, [esp+5Ch+hash]", "cmp     eax, [esp+5Ch+input]", "jz      short loc_514DF"], "preds": [332676, 332997], "succs": [333011, 333023]}, "333011": {"disasm": ["sub     esp, 0Ch", "push    eax; a", "call    _gcry_mpi_free", "add     esp, 10h"], "preds": [333001, 333048], "succs": [333023]}, "333023": {"disasm": ["mov     eax, [esp+5Ch+var_20]", "xor     eax, large gs:14h", "jnz     short loc_5150C"], "preds": [332512, 333001, 333011, 333066], "succs": [333036, 333068]}, "333036": {"disasm": ["mov     eax, [esp+5Ch+rc]", "add     esp, 4Ch", "pop     ebx", "pop     esi", "pop     r", "pop     ebp", "retn"], "preds": [333023], "succs": []}, "333048": {"disasm": ["mov     eax, [esp+5Ch+hash]", "mov     [esp+5Ch+rc], 46h ; 'F'", "cmp     eax, [esp+5Ch+input]", "jnz     short loc_514D3"], "preds": [332901, 332913], "succs": [333011, 333066]}, "333066": {"disasm": ["jmp     short loc_514DF"], "preds": [333048], "succs": [333023]}, "333068": {"disasm": ["call    __stack_chk_fail_local"], "preds": [333023], "succs": []}}, "gen_k": {"355216": {"disasm": ["push    ebp", "push    edi", "mov     edi, p_0", "push    esi", "push    ebx", "call    __x86_get_pc_thunk_bx", "add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)", "sub     esp, 28h", "push    0; nlimbs", "call    _gcry_mpi_alloc_secure", "mov     edx, [p_0+4]", "mov     esi, eax", "pop     k", "push    edx; nlimbs", "call    _gcry_mpi_alloc", "mov     [esp+3Ch+rndbuf], p_0", "mov     [esp+3Ch+a], p_0; a", "mov     ebp, eax", "call    _gcry_mpi_copy", "pop     ecx", "mov     p_0, eax", "mov     p_1, [esp+38h+rndbuf]", "push    eax; a", "call    _gcry_mpi_get_nbits", "mov     [esp+3Ch+nbits], eax", "add     nbits_0, 7", "shr     eax, 3", "mov     [esp+3Ch+a], 1; mask", "mov     [esp+3Ch+nbytes], eax", "call    _gcry_get_debug_flag", "add     esp, 10h", "test    eax, eax", "jnz     loc_56E1D"], "preds": [], "succs": [355319, 355869]}, "355319": {"disasm": ["push    eax", "push    1; v", "mov     eax, [esp+34h+rndbuf]", "push    eax; u", "push    p_1; w", "call    _gcry_mpi_sub_ui", "add     esp, 10h", "lea     eax, (aPkElg - 0F5E70h)[ebx]; \"pk_elg\"", "mov     [esp+2Ch+rndbuf], 0", "mov     [esp+2Ch+var_20], eax", "cmp     [esp+2Ch+nbits], 1Fh", "setbe   byte ptr [esp+2Ch+nbits]"], "preds": [355216, 355869], "succs": [355363]}, "355363": {"disasm": ["mov     eax, [esp+2Ch+rndbuf]", "test    eax, eax", "jz      loc_56D18"], "preds": [355319, 355530, 355551, 355648, 355669, 355683], "succs": [355374, 355608]}, "355374": {"disasm": ["cmp     byte ptr [esp+2Ch+nbits], 0", "jnz     loc_56D18"], "preds": [355363, 355565], "succs": [355385, 355608]}, "355385": {"disasm": ["push    eax", "push    eax", "push    1; level", "push    4; nbytes", "call    _gcry_random_bytes_secure", "mov     ecx, [esp+3Ch+rndbuf]", "mov     edx, [pp]", "mov     [ecx], edx", "mov     [esp+3Ch+a], pp; p", "call    _gcry_free", "add     esp, 10h"], "preds": [355374], "succs": [355415]}, "355415": {"disasm": ["push    0; sign", "mov     eax, [esp+30h+nbytes]", "push    eax; nbytes", "mov     eax, [esp+34h+rndbuf]", "push    eax; buffer_arg", "push    k; a", "call    _gcry_mpi_set_buffer", "add     esp, 10h", "jmp     short loc_56CBA"], "preds": [355385, 355608], "succs": [355514]}, "355440": {"disasm": ["push    eax", "push    eax", "push    0; v", "push    k; u", "call    _gcry_mpi_cmp_ui", "add     esp, 10h", "test    eax, eax", "jle     loc_56D40"], "preds": [355514], "succs": [355461, 355648]}, "355461": {"disasm": ["push    eax", "push    p_1; xb", "push    k; xa", "push    temp; g", "call    _gcry_mpi_gcd", "add     esp, 10h", "test    eax, eax", "jnz     found"], "preds": [355440], "succs": [355481, 355720]}, "355481": {"disasm": ["push    ecx", "push    1; v", "push    k; u", "push    k; w", "call    _gcry_mpi_add_ui", "mov     [esp+3Ch+a], 1; mask", "call    _gcry_get_debug_flag", "add     esp, 10h", "test    eax, eax", "jnz     loc_56DF0"], "preds": [355461], "succs": [355514, 355824]}, "355514": {"disasm": ["push    eax", "push    eax", "push    p_1; v", "push    k; u", "call    _gcry_mpi_cmp", "add     esp, 10h", "test    eax, eax", "js      short loc_56C70"], "preds": [355415, 355481, 355824, 355838], "succs": [355440, 355530]}, "355530": {"disasm": ["sub     esp, 0Ch", "push    1; mask", "call    _gcry_get_debug_flag", "add     esp, 10h", "test    eax, eax", "jz      loc_56C23"], "preds": [355514], "succs": [355363, 355551]}, "355551": {"disasm": ["mov     eax, ds:(progress_cb_1 - 0F5E70h)[ebx]", "test    eax, eax", "jz      loc_56C23"], "preds": [355530], "succs": [355363, 355565]}, "355565": {"disasm": ["sub     esp, 0Ch", "mov     ecx, ds:(progress_cb_data_1 - 0F5E70h)[ebx]", "push    0", "push    0", "push    2Bh ; '+'", "mov     edx, [esp+44h+var_20]", "push    edx", "push    ecx", "call    eax", "mov     eax, [esp+4Ch+rndbuf]", "add     esp, 20h", "test    rndbuf_0, rndbuf_0", "jnz     loc_56C2E"], "preds": [355551], "succs": [355374, 355603]}, "355603": {"disasm": ["lea     k, [k+0]", "nop"], "preds": [355565], "succs": [355608]}, "355608": {"disasm": ["sub     esp, 0Ch", "mov     eax, [esp+38h+rndbuf]", "push    eax; p", "call    _gcry_free", "pop     edx", "pop     ecx", "push    1; level", "mov     eax, [esp+38h+nbytes]", "push    eax; nbytes", "call    _gcry_random_bytes_secure", "mov     [esp+3Ch+rndbuf], eax", "add     esp, 10h", "jmp     loc_56C57"], "preds": [355363, 355374, 355603], "succs": [355415]}, "355648": {"disasm": ["sub     esp, 0Ch", "push    1; mask", "call    _gcry_get_debug_flag", "add     esp, 10h", "test    eax, eax", "jz      loc_56C23"], "preds": [355440], "succs": [355363, 355669]}, "355669": {"disasm": ["mov     eax, ds:(progress_cb_1 - 0F5E70h)[ebx]", "test    eax, eax", "jz      loc_56C23"], "preds": [355648], "succs": [355363, 355683]}, "355683": {"disasm": ["sub     esp, 0Ch", "mov     ecx, ds:(progress_cb_data_1 - 0F5E70h)[ebx]", "push    0", "push    0", "push    2Dh ; '-'", "mov     edx, [esp+44h+var_20]", "push    edx", "push    ecx", "call    eax", "add     esp, 20h", "jmp     loc_56C23"], "preds": [355669], "succs": [355363]}, "355720": {"disasm": ["sub     esp, 0Ch", "mov     eax, [esp+38h+rndbuf]", "push    eax; p", "call    _gcry_free", "mov     [esp+3Ch+a], 1; mask", "call    _gcry_get_debug_flag", "add     esp, 10h", "test    eax, eax", "jz      short loc_56DCE"], "preds": [355461], "succs": [355752, 355790]}, "355752": {"disasm": ["mov     eax, ds:(progress_cb_1 - 0F5E70h)[ebx]", "test    eax, eax", "jz      short loc_56DCE"], "preds": [355720], "succs": [355762, 355790]}, "355762": {"disasm": ["sub     esp, 0Ch", "lea     edx, (aPkElg - 0F5E70h)[ebx]; \"pk_elg\"", "push    0", "push    0", "push    0Ah", "push    edx", "mov     edx, ds:(progress_cb_data_1 - 0F5E70h)[ebx]", "push    edx", "call    eax", "add     esp, 20h"], "preds": [355752], "succs": [355790]}, "355790": {"disasm": ["sub     esp, 0Ch", "push    p_1; a", "call    _gcry_mpi_free", "mov     [esp+3Ch+a], temp; a", "call    _gcry_mpi_free", "add     esp, 2Ch", "mov     eax, k", "pop     ebx", "pop     k", "pop     p_1", "pop     temp", "retn"], "preds": [355720, 355752, 355762], "succs": []}, "355824": {"disasm": ["mov     eax, ds:(progress_cb_1 - 0F5E70h)[ebx]", "test    eax, eax", "jz      loc_56CBA"], "preds": [355481], "succs": [355514, 355838]}, "355838": {"disasm": ["sub     esp, 0Ch", "mov     edx, ds:(progress_cb_data_1 - 0F5E70h)[ebx]", "push    0", "push    0", "push    2Eh ; '.'", "mov     ecx, [esp+44h+var_20]", "push    ecx", "push    edx", "call    eax", "add     esp, 20h", "jmp     loc_56CBA"], "preds": [355824], "succs": [355514]}, "355869": {"disasm": ["sub     esp, 0Ch", "lea     eax, (aChoosingARando_1 - 0F5E70h)[ebx]; \"choosing a random k\\n\"", "push    eax; fmt", "call    _gcry_log_debug", "add     esp, 10h", "jmp     loc_56BF7"], "preds": [355216], "succs": [355319]}}, "decrypt": {"358752": {"disasm": ["push    ebp", "mov     ebp, a_0", "push    edi", "mov     edi, b_0", "push    esi", "push    ebx", "call    __x86_get_pc_thunk_bx", "add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)", "sub     esp, 38h", "mov     a_0, [esp+48h+arg_0]", "mov     [esp+48h+output], output_0", "mov     output_0, [edx]", "push    eax; a", "call    _gcry_mpi_get_nbits", "mov     esi, eax", "mov     [esp+4Ch+var_4C], a_0; a", "mov     [esp+4Ch+a], a_0", "call    _gcry_mpi_normalize", "mov     [esp+4Ch+var_4C], b_0; a", "mov     [esp+4Ch+b], b_0", "call    _gcry_mpi_normalize", "mov     [esp+4Ch+var_4C], nbits_0; nbits", "call    _gcry_mpi_snew", "mov     [esp+4Ch+var_4C], nbits_0; nbits", "mov     [esp+4Ch+t1], eax", "call    _gcry_mpi_snew", "mov     [esp+4Ch+var_4C], nbits_0; nbits", "mov     b_0, eax", "call    _gcry_mpi_new", "mov     [esp+4Ch+var_4C], nbits_0; nbits", "mov     [esp+4Ch+r], eax", "call    _gcry_mpi_new", "mov     [esp+4Ch+var_4C], nbits_0; nbits", "mov     [esp+4Ch+r1], eax", "call    _gcry_mpi_new", "mov     [esp+4Ch+var_4C], nbits_0; nbits", "mov     [esp+4Ch+h], eax", "call    _gcry_mpi_snew", "add     esp, 0Ch", "mov     a_0, eax", "push    0; level", "push    nbits_0; nbits", "mov     edx, [esp+48h+r]", "push    edx; w", "call    _gcry_mpi_randomize", "add     esp, 0Ch", "push    0; level", "push    nbits_0; nbits", "dec     nbits_0", "mov     ecx, [esp+48h+r1]", "push    ecx; w", "call    _gcry_mpi_randomize", "pop     eax", "pop     edx", "push    esi; n", "mov     esi, [esp+48h+r1]", "push    esi; a", "call    _gcry_mpi_set_highbit", "add     esp, 0Ch", "push    1; v", "mov     ecx, [esp+44h+arg_0]", "mov     ecx, [ecx]", "push    ecx; u", "mov     eax, [esp+48h+h]", "push    eax; w", "call    _gcry_mpi_sub_ui", "add     esp, 0Ch", "mov     [esp+40h+r1], esi", "push    esi; v", "mov     eax, [esp+44h+h]", "push    eax; u", "push    x_blind; w", "call    _gcry_mpi_mul", "add     esp, 0Ch", "push    x_blind; v", "mov     eax, [esp+44h+arg_4]", "mov     eax, [eax]", "push    eax; u", "push    x_blind; w", "call    _gcry_mpi_add", "mov     edx, [esp+4Ch+arg_0]", "mov     eax, [edx]", "push    eax; mod", "push    x_blind; expo", "mov     eax, [esp+54h+r]", "push    eax; base", "mov     esi, [esp+58h+t1]", "push    esi; res", "call    _gcry_mpi_powm", "mov     ecx, [esp+5Ch+arg_0]", "add     esp, 20h", "mov     edx, [ecx]", "push    edx; m", "mov     ecx, [esp+40h+r]", "push    ecx; v", "mov     eax, [esp+44h+a]", "push    eax; u", "push    t2; w", "call    _gcry_mpi_mulm", "mov     edx, [esp+4Ch+arg_0]", "mov     eax, [edx]", "push    eax; mod", "push    x_blind; expo", "push    t2; base", "push    t2; res", "call    _gcry_mpi_powm", "mov     ecx, [esp+5Ch+arg_0]", "add     esp, 1Ch", "mov     eax, [ecx]", "push    eax; n", "push    t2; a", "push    t2; x", "call    _gcry_mpi_invm", "mov     edx, [esp+4Ch+arg_0]", "mov     eax, [edx]", "push    eax; m", "push    t2; v", "push    esi; u", "push    esi; w", "call    _gcry_mpi_mulm", "add     esp, 14h", "push    x_blind; a", "call    _gcry_mpi_free", "pop     eax", "mov     edx, [esp+48h+h]", "push    edx; a", "call    _gcry_mpi_free", "pop     ecx", "mov     x_blind, [esp+48h+r1]", "push    ebp; a", "call    _gcry_mpi_free", "pop     eax", "mov     eax, [esp+48h+r]", "push    eax; a", "call    _gcry_mpi_free", "mov     [esp+4Ch+var_4C], t2; a", "call    _gcry_mpi_free", "mov     ecx, [esp+4Ch+arg_0]", "mov     eax, [ecx]", "push    eax; m", "push    esi; v", "mov     eax, [esp+54h+b]", "push    eax; u", "mov     eax, [esp+58h+output]", "push    eax; w", "call    _gcry_mpi_mulm", "add     esp, 14h", "push    esi; a", "call    _gcry_mpi_free", "add     esp, 3Ch", "pop     ebx", "pop     esi", "pop     t2", "pop     ebp", "retn"], "preds": [], "succs": []}}}